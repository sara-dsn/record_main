security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # Remarquez l'entrée password_hashers avant providers : dès la création de la classe, Symfony vous permet d'utiliser 
        # le service UserPasswordHasherInterface pour hasher le mot de passe de vos utilisateurs avant de les insérer dans la base de donnée.
        #  Par défaut, Symfony vous propose "auto" pour le système de hashage,
        #  ce qui veut dire que vous lui laissez la responsabilité de choisir la fonction de hashage la plus récente (aujourd'hui bcrypt, mais il y en a d'autres).
   
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: email

# La section appelée firewalls constitue le centre névralgique de votre application Symfony : c'est elle qui gère l'authentification! 
# Le firewall(en français pare-feu) définit les espaces protégés par un login et la manière dont les utilisateurs peuvent se connecter 
# (formulaire de login, jeton API, Oauth etc.). Le "main" est le firewall principal (il gère tous les URLs,
#  c'est pratiquement l'entrée de votre site!). Si vous en rajoutez d'autres (un firewall appelé api, par exemple), 
#  vous devez les déclarer avant le main!
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\UserFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
